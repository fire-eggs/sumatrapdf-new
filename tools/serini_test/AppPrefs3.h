/* Copyright 2013 the SumatraPDF project authors (see AUTHORS file).
   License: GPLv3 (see COPYING) */

// This file is auto-generated by gen_appprefs3.py

#ifndef AppPrefs3_h
#define AppPrefs3_h

// Values which are persisted for bookmarks/favorites
struct Favorite {
    // name of this favorite as shown in the menu
    WCHAR * name;
    // which page this favorite is about
    int pageNo;
    // optional label for this page (if logical and physical numers
    // disagree)
    WCHAR * pageLabel;
    // assigned in AppendFavMenuItems()
    int menuId;
};

// Most values in this structure are remembered individually for every
// file and are by default also persisted so that reading can be resumed
struct File {
    // absolute path to a document that's been loaded successfully
    WCHAR * filePath;
    // in order to prevent documents that haven't been opened for a while
    // but used to be opened very frequently constantly remain in top
    // positions, the openCount will be cut in half after every week, so
    // that the Frequently Read list hopefully better reflects the
    // currently relevant documents
    int openCount;
    // a user can "pin" a preferred document to the Frequently Read list so
    // that the document isn't replaced by more frequently used ones
    bool isPinned;
    // if a document can no longer be found but we still remember valuable
    // state, it's classified as missing so that it can be hidden instead
    // of removed
    bool isMissing;
    // whether global defaults should be used when reloading this file
    // instead of the values listed below
    bool useGlobalValues;
    // how pages should be layed out for this document
    WCHAR * displayMode;
    // how far this document has been scrolled
    PointI scrollPos;
    // the scrollPos values are relative to the top-left corner of this
    // page
    int pageNo;
    // for bookmarking ebook files: offset of the current page reparse
    // point within html
    int reparseIdx;
    // the current zoom factor in % (negative values indicate virtual
    // settings)
    float zoomVirtual;
    // how far pages have been rotated as a multiple of 90 degrees
    int rotation;
    // default state of new SumatraPDF windows (same as the last closed)
    int windowState;
    // default position (can be on any monitor)
    RectI windowPos;
    // hex encoded MD5 fingerprint of file content (32 chars) followed by
    // crypt key (64 chars) - only applies for PDF documents
    char * decryptionKey;
    // whether the table of contents (Bookmarks) sidebar is shown for this
    // document
    bool tocVisible;
    // the width of the left sidebar panel containing the table of contents
    int sidebarDx;
    // tocState is an array of ids for ToC items that have been toggled by
    // the user (i.e. aren't in their default expansion state). - Note: We
    // intentionally track toggle state as opposed to expansion state so
    // that we only have to save a diff instead of all states for the whole
    // tree (which can be quite large) - and also due to backwards
    // compatibility
    char * tocState;
    // Values which are persisted for bookmarks/favorites
    Vec<Favorite *> * favorite;
    // temporary value needed for FileHistory::cmpOpenCount
    size_t index;
    // the thumbnail is persisted separately as a PNG in sumatrapdfcache
    void * thumbnail;
};

// Most values on this structure can be updated through the UI and are
// persisted in SumatraPDF.ini (previously in sumatrapdfprefs.dat)
struct GlobalPrefs {
    // whether not to store display settings for individual documents
    bool globalPrefsOnly;
    // pointer to a static string that is part of LangDef, don't free
    char * currLangCode;
    // whether the toolbar should be visible by default in the main window
    bool toolbarVisible;
    // whether the Favorites sidebar should be visible by default in the
    // main window
    bool favVisible;
    // if false, we won't ask the user if he wants Sumatra to handle PDF
    // files
    bool pdfAssociateDontAskAgain;
    // if pdfAssociateDontAskAgain is true, says whether we should silently
    // associate or not
    bool pdfAssociateShouldAssociate;
    // whether SumatraPDF should check once a day whether updates are
    // available
    bool enableAutoUpdate;
    // if true, we remember which files we opened and their settings
    bool rememberOpenedFiles;
    // whether to display documents black-on-white or in system colors
    bool useSysColors;
    // pattern used to launch the editor when doing inverse search
    WCHAR * inverseSearchCmdLine;
    // whether to expose the SyncTeX enhancements to the user
    bool enableTeXEnhancements;
    // When we show 'new version available', user has an option to check
    // 'skip this version'. This remembers which version is to be skipped.
    // If NULL - don't skip
    WCHAR * versionToSkip;
    // the time SumatraPDF has last checked for updates (cf.
    // EnableAutoUpdate)
    FILETIME lastUpdateTime;
    // how pages should be layed out by default
    WCHAR * defaultDisplayMode;
    // the default zoom factor in % (negative values indicate virtual
    // settings)
    float defaultZoom;
    // default state of new SumatraPDF windows (same as the last closed)
    int windowState;
    // default position (can be on any monitor)
    RectI windowPos;
    // whether the table of contents (Bookmarks) sidebar should be shown by
    // default when its available for a document
    bool tocVisible;
    // if sidebar (favorites and/or bookmarks) is visible, this is the
    // width of the left sidebar panel containing them
    int sidebarDx;
    // if both favorites and bookmarks parts of sidebar are visible, this
    // is the height of bookmarks (table of contents) part
    int tocDy;
    // whether to display Frequently Read documents or the About page in an
    // empty window
    bool showStartPage;
    // week count since 2011-01-01 needed to "age" openCount values in file
    // history
    int openCountWeek;
    // display CBX double pages from right to left
    bool cbxR2L;
    // Most values in this structure are remembered individually for every
    // file and are by default also persisted so that reading can be
    // resumed
    Vec<File *> * file;
    // modification time of the preferences file when it was last read
    FILETIME lastPrefUpdate;
    // a list of settings which this version of SumatraPDF didn't know how
    // to handle
    char * unknownSettings;
};

// this list contains a list of additional external viewers for various
// file types (multiple entries of the same format are recognised)
struct ExternalViewer {
    // command line with which to call the external viewer, may contain %p
    // for page numer and %1 for the file name
    WCHAR * commandLine;
    // name of the external viewer to be shown in the menu (implied by
    // CommandLine if missing)
    WCHAR * name;
    // filter for which file types the menu item is to be shown (e.g.
    // "*.pdf;*.xps"; "*" if missing)
    WCHAR * filter;
};

// these values allow to customize how the forward search highlight
// appears
struct ForwardSearch {
    // when set to a positive value, the forward search highlight style
    // will be changed to a rectangle at the left of the page (with the
    // indicated amount of margin from the page margin)
    int highlightOffset;
    // the width of the highlight rectangle for when HighlightOffset is set
    int highlightWidth;
    // the color used for the forward search highlight
    COLORREF highlightColor;
    // whether the forward search highlight will remain visible until the
    // next mouse click instead of fading away instantly
    bool highlightPermanent;
};

// these values allow to tweak the experimental feature for using a
// color gradient to subconsciously determine reading progress
struct BackgroundGradient {
    // whether to draw a gradient behind the pages
    bool enabled;
    // color at the top of the document (first page)
    COLORREF colorTop;
    // color at the center of the document (middlest page)
    COLORREF colorMiddle;
    // color at the bottom of the document (last page)
    COLORREF colorBottom;
};

// these values allow to change how far apart pages are layed out
struct PagePadding {
    // size of the left/right margin between window and document
    int outerX;
    // size of the top/bottom margin between window and document
    int outerY;
    // size of the horizontal margin between two pages
    int innerX;
    // size of the vertical margin between two pages
    int innerY;
};

// these values allow to override the default settings in the Print
// dialog
struct PrinterDefaults {
    // default value for scaling (shrink, fit, none)
    char * printScale;
    // default value for the compatibility option
    bool printAsImage;
};

// these values allow to tweak various bits and pieces of SumatraPDF
struct AdvancedPrefs {
    // whether the UI used for PDF documents will be used for ebooks as
    // well (enables printing and searching, disables automatic reflow)
    bool traditionalEbookUI;
    // whether opening a new document should happen in an already running
    // SumatraPDF instance so that there's only one process and documents
    // aren't opend twice
    bool reuseInstance;
    // background color of the non-document windows, traditionally yellow
    COLORREF mainWindowBackground;
    // whether the Esc key will exit SumatraPDF same as 'q'
    bool escToExit;
    // color value with which black (text) will be substituted
    COLORREF textColor;
    // color value with which white (background) will be substituted
    COLORREF pageColor;
};

// All values in this structure are read from SumatraPDF-user.ini and
// can't be changed from within the UI
struct UserPrefs {
    // these values allow to tweak various bits and pieces of SumatraPDF
    AdvancedPrefs advancedPrefs;
    // these values allow to override the default settings in the Print
    // dialog
    PrinterDefaults printerDefaults;
    // these values allow to change how far apart pages are layed out
    PagePadding pagePadding;
    // these values allow to tweak the experimental feature for using a
    // color gradient to subconsciously determine reading progress
    BackgroundGradient backgroundGradient;
    // these values allow to customize how the forward search highlight
    // appears
    ForwardSearch forwardSearch;
    // this list contains a list of additional external viewers for various
    // file types (multiple entries of the same format are recognised)
    Vec<ExternalViewer *> * externalViewer;
};

enum SettingType {
    Type_Meta, Type_Struct, Type_Array, Type_Compact,
    Type_Bool, Type_Color, Type_Float, Type_Int, Type_String, Type_Utf8String,
};

struct SettingInfo {
    SettingType type;
    uint16_t nameOffset;
    uint16_t offset;
    intptr_t value;
};

static inline size_t GetFieldCount(SettingInfo *meta) { return meta[0].nameOffset; }
static inline size_t GetStructSize(SettingInfo *meta) { return meta[0].offset; }
static inline SettingInfo *GetSubstruct(SettingInfo& field) { return (SettingInfo *)field.value; }
static inline const char *GetFieldName(SettingInfo *meta, size_t idx) { return (const char *)meta[0].value + meta[idx].nameOffset; }

#ifdef INCLUDE_APPPREFS3_METADATA
static SettingInfo gFILETIMEInfo[] = {
    { Type_Meta, 2, sizeof(FILETIME), (intptr_t)"DwHighDateTime\0DwLowDateTime" },
    { Type_Int, 0, offsetof(FILETIME, dwHighDateTime), 0 },
    { Type_Int, 15, offsetof(FILETIME, dwLowDateTime), 0 },
};

static SettingInfo gRectIInfo[] = {
    { Type_Meta, 4, sizeof(RectI), (intptr_t)"X\0Y\0Dx\0Dy" },
    { Type_Int, 0, offsetof(RectI, x), 0 },
    { Type_Int, 2, offsetof(RectI, y), 0 },
    { Type_Int, 4, offsetof(RectI, dx), 0 },
    { Type_Int, 7, offsetof(RectI, dy), 0 },
};

static SettingInfo gPointIInfo[] = {
    { Type_Meta, 2, sizeof(PointI), (intptr_t)"X\0Y" },
    { Type_Int, 0, offsetof(PointI, x), 0 },
    { Type_Int, 2, offsetof(PointI, y), 0 },
};

static SettingInfo gFavoriteInfo[] = {
    { Type_Meta, 3, sizeof(Favorite), (intptr_t)"Name\0PageNo\0PageLabel" },
    { Type_String, 0, offsetof(Favorite, name), NULL },
    { Type_Int, 5, offsetof(Favorite, pageNo), 0 },
    { Type_String, 12, offsetof(Favorite, pageLabel), NULL },
};

static SettingInfo gFileInfo[] = {
    { Type_Meta, 18, sizeof(File), (intptr_t)"FilePath\0OpenCount\0IsPinned\0IsMissing\0UseGlobalValues\0DisplayMode\0ScrollPos\0PageNo\0ReparseIdx\0ZoomVirtual\0Rotation\0WindowState\0WindowPos\0DecryptionKey\0TocVisible\0SidebarDx\0TocState\0Favorite" },
    { Type_String, 0, offsetof(File, filePath), NULL },
    { Type_Int, 9, offsetof(File, openCount), 0 },
    { Type_Bool, 19, offsetof(File, isPinned), false },
    { Type_Bool, 28, offsetof(File, isMissing), false },
    { Type_Bool, 38, offsetof(File, useGlobalValues), false },
    { Type_String, 54, offsetof(File, displayMode), (intptr_t)L"automatic" },
    { Type_Compact, 66, offsetof(File, scrollPos), (intptr_t)gPointIInfo },
    { Type_Int, 76, offsetof(File, pageNo), 1 },
    { Type_Int, 83, offsetof(File, reparseIdx), 0 },
    { Type_Float, 94, offsetof(File, zoomVirtual), (intptr_t)"100" },
    { Type_Int, 106, offsetof(File, rotation), 0 },
    { Type_Int, 115, offsetof(File, windowState), 0 },
    { Type_Compact, 127, offsetof(File, windowPos), (intptr_t)gRectIInfo },
    { Type_Utf8String, 137, offsetof(File, decryptionKey), NULL },
    { Type_Bool, 151, offsetof(File, tocVisible), true },
    { Type_Int, 162, offsetof(File, sidebarDx), 0 },
    { Type_Utf8String, 172, offsetof(File, tocState), NULL },
    { Type_Array, 181, offsetof(File, favorite), (intptr_t)gFavoriteInfo },
};

static SettingInfo gGlobalPrefsInfo[] = {
    { Type_Meta, 24, sizeof(GlobalPrefs), (intptr_t)"GlobalPrefsOnly\0CurrLangCode\0ToolbarVisible\0FavVisible\0PdfAssociateDontAskAgain\0PdfAssociateShouldAssociate\0EnableAutoUpdate\0RememberOpenedFiles\0UseSysColors\0InverseSearchCmdLine\0EnableTeXEnhancements\0VersionToSkip\0LastUpdateTime\0DefaultDisplayMode\0DefaultZoom\0WindowState\0WindowPos\0TocVisible\0SidebarDx\0TocDy\0ShowStartPage\0OpenCountWeek\0CbxR2L\0File" },
    { Type_Bool, 0, offsetof(GlobalPrefs, globalPrefsOnly), false },
    { Type_Utf8String, 16, offsetof(GlobalPrefs, currLangCode), NULL },
    { Type_Bool, 29, offsetof(GlobalPrefs, toolbarVisible), true },
    { Type_Bool, 44, offsetof(GlobalPrefs, favVisible), false },
    { Type_Bool, 55, offsetof(GlobalPrefs, pdfAssociateDontAskAgain), false },
    { Type_Bool, 80, offsetof(GlobalPrefs, pdfAssociateShouldAssociate), false },
    { Type_Bool, 108, offsetof(GlobalPrefs, enableAutoUpdate), true },
    { Type_Bool, 125, offsetof(GlobalPrefs, rememberOpenedFiles), true },
    { Type_Bool, 145, offsetof(GlobalPrefs, useSysColors), false },
    { Type_String, 158, offsetof(GlobalPrefs, inverseSearchCmdLine), NULL },
    { Type_Bool, 179, offsetof(GlobalPrefs, enableTeXEnhancements), false },
    { Type_String, 201, offsetof(GlobalPrefs, versionToSkip), NULL },
    { Type_Compact, 215, offsetof(GlobalPrefs, lastUpdateTime), (intptr_t)gFILETIMEInfo },
    { Type_String, 230, offsetof(GlobalPrefs, defaultDisplayMode), (intptr_t)L"automatic" },
    { Type_Float, 249, offsetof(GlobalPrefs, defaultZoom), (intptr_t)"-1" },
    { Type_Int, 261, offsetof(GlobalPrefs, windowState), 1 },
    { Type_Compact, 273, offsetof(GlobalPrefs, windowPos), (intptr_t)gRectIInfo },
    { Type_Bool, 283, offsetof(GlobalPrefs, tocVisible), true },
    { Type_Int, 294, offsetof(GlobalPrefs, sidebarDx), 0 },
    { Type_Int, 304, offsetof(GlobalPrefs, tocDy), 0 },
    { Type_Bool, 310, offsetof(GlobalPrefs, showStartPage), true },
    { Type_Int, 324, offsetof(GlobalPrefs, openCountWeek), 0 },
    { Type_Bool, 338, offsetof(GlobalPrefs, cbxR2L), false },
    { Type_Array, 345, offsetof(GlobalPrefs, file), (intptr_t)gFileInfo },
};

static SettingInfo gAdvancedPrefsInfo[] = {
    { Type_Meta, 6, sizeof(AdvancedPrefs), (intptr_t)"TraditionalEbookUI\0ReuseInstance\0MainWindowBackground\0EscToExit\0TextColor\0PageColor" },
    { Type_Bool, 0, offsetof(AdvancedPrefs, traditionalEbookUI), false },
    { Type_Bool, 19, offsetof(AdvancedPrefs, reuseInstance), false },
    { Type_Color, 33, offsetof(AdvancedPrefs, mainWindowBackground), 0xfff200 },
    { Type_Bool, 54, offsetof(AdvancedPrefs, escToExit), false },
    { Type_Color, 64, offsetof(AdvancedPrefs, textColor), 0x000000 },
    { Type_Color, 74, offsetof(AdvancedPrefs, pageColor), 0xffffff },
};

static SettingInfo gPrinterDefaultsInfo[] = {
    { Type_Meta, 2, sizeof(PrinterDefaults), (intptr_t)"PrintScale\0PrintAsImage" },
    { Type_Utf8String, 0, offsetof(PrinterDefaults, printScale), (intptr_t)"shrink" },
    { Type_Bool, 11, offsetof(PrinterDefaults, printAsImage), false },
};

static SettingInfo gPagePaddingInfo[] = {
    { Type_Meta, 4, sizeof(PagePadding), (intptr_t)"OuterX\0OuterY\0InnerX\0InnerY" },
    { Type_Int, 0, offsetof(PagePadding, outerX), 4 },
    { Type_Int, 7, offsetof(PagePadding, outerY), 2 },
    { Type_Int, 14, offsetof(PagePadding, innerX), 4 },
    { Type_Int, 21, offsetof(PagePadding, innerY), 4 },
};

static SettingInfo gBackgroundGradientInfo[] = {
    { Type_Meta, 4, sizeof(BackgroundGradient), (intptr_t)"Enabled\0ColorTop\0ColorMiddle\0ColorBottom" },
    { Type_Bool, 0, offsetof(BackgroundGradient, enabled), false },
    { Type_Color, 8, offsetof(BackgroundGradient, colorTop), 0xaa2828 },
    { Type_Color, 17, offsetof(BackgroundGradient, colorMiddle), 0x28aa28 },
    { Type_Color, 29, offsetof(BackgroundGradient, colorBottom), 0x2828aa },
};

static SettingInfo gForwardSearchInfo[] = {
    { Type_Meta, 4, sizeof(ForwardSearch), (intptr_t)"HighlightOffset\0HighlightWidth\0HighlightColor\0HighlightPermanent" },
    { Type_Int, 0, offsetof(ForwardSearch, highlightOffset), 0 },
    { Type_Int, 16, offsetof(ForwardSearch, highlightWidth), 15 },
    { Type_Color, 31, offsetof(ForwardSearch, highlightColor), 0x6581ff },
    { Type_Bool, 46, offsetof(ForwardSearch, highlightPermanent), false },
};

static SettingInfo gExternalViewerInfo[] = {
    { Type_Meta, 3, sizeof(ExternalViewer), (intptr_t)"CommandLine\0Name\0Filter" },
    { Type_String, 0, offsetof(ExternalViewer, commandLine), NULL },
    { Type_String, 12, offsetof(ExternalViewer, name), NULL },
    { Type_String, 17, offsetof(ExternalViewer, filter), NULL },
};

static SettingInfo gUserPrefsInfo[] = {
    { Type_Meta, 6, sizeof(UserPrefs), (intptr_t)"AdvancedPrefs\0PrinterDefaults\0PagePadding\0BackgroundGradient\0ForwardSearch\0ExternalViewer" },
    { Type_Struct, 0, offsetof(UserPrefs, advancedPrefs), (intptr_t)gAdvancedPrefsInfo },
    { Type_Struct, 14, offsetof(UserPrefs, printerDefaults), (intptr_t)gPrinterDefaultsInfo },
    { Type_Struct, 30, offsetof(UserPrefs, pagePadding), (intptr_t)gPagePaddingInfo },
    { Type_Struct, 42, offsetof(UserPrefs, backgroundGradient), (intptr_t)gBackgroundGradientInfo },
    { Type_Struct, 61, offsetof(UserPrefs, forwardSearch), (intptr_t)gForwardSearchInfo },
    { Type_Array, 75, offsetof(UserPrefs, externalViewer), (intptr_t)gExternalViewerInfo },
};
#endif

#endif
