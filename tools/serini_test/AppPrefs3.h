/* Copyright 2013 the SumatraPDF project authors (see AUTHORS file).
   License: GPLv3 (see COPYING) */

// This file is auto-generated by gen_appprefs3.py

#ifndef AppPrefs3_h
#define AppPrefs3_h

// Values which are persisted for bookmarks/favorites
struct Favorites {
    // name of this favorite as shown in the menu
    WCHAR * name;
    // which page this favorite is about
    int pageNo;
    // optional label for this page (if logical and physical numers
    // disagree)
    WCHAR * pageLabel;
    // assigned in AppendFavMenuItems()
    int menuId;
};

// Most values in this structure are remembered individually for every
// file and are by default also persisted so that reading can be resumed
struct FileHistory {
    // absolute path to a document that's been loaded successfully
    WCHAR * filePath;
    // in order to prevent documents that haven't been opened for a while
    // but used to be opened very frequently constantly remain in top
    // positions, the openCount will be cut in half after every week, so
    // that the Frequently Read list hopefully better reflects the
    // currently relevant documents
    int openCount;
    // a user can "pin" a preferred document to the Frequently Read list so
    // that the document isn't replaced by more frequently used ones
    bool isPinned;
    // if a document can no longer be found but we still remember valuable
    // state, it's classified as missing so that it can be hidden instead
    // of removed
    bool isMissing;
    // whether global defaults should be used when reloading this file
    // instead of the values listed below
    bool useGlobalValues;
    // how pages should be layed out for this document
    WCHAR * displayMode;
    // how far this document has been scrolled
    PointI * scrollPos;
    // the scrollPos values are relative to the top-left corner of this
    // page
    int pageNo;
    // for bookmarking ebook files: offset of the current page reparse
    // point within html
    int reparseIdx;
    // the current zoom factor in % (negative values indicate virtual
    // settings)
    float zoomVirtual;
    // how far pages have been rotated as a multiple of 90 degrees
    int rotation;
    // default state of new SumatraPDF windows (same as the last closed)
    int windowState;
    // default position (can be on any monitor)
    RectI * windowPos;
    // hex encoded MD5 fingerprint of file content (32 chars) followed by
    // crypt key (64 chars) - only applies for PDF documents
    char * decryptionKey;
    // whether the table of contents (Bookmarks) sidebar is shown for this
    // document
    bool tocVisible;
    // the width of the left sidebar panel containing the table of contents
    int sidebarDx;
    // tocState is an array of ids for ToC items that have been toggled by
    // the user (i.e. aren't in their default expansion state). - Note: We
    // intentionally track toggle state as opposed to expansion state so
    // that we only have to save a diff instead of all states for the whole
    // tree (which can be quite large) - and also due to backwards
    // compatibility
    char * tocState;
    // temporary value needed for FileHistory::cmpOpenCount
    size_t index;
    // the thumbnail is persisted separately as a PNG in sumatrapdfcache
    void * thumbnail;
};

// Most values on this structure can be updated through the UI and are
// persisted in SumatraPDF.ini (previously in sumatrapdfprefs.dat)
struct GlobalPrefs {
    // whether not to store display settings for individual documents
    bool globalPrefsOnly;
    // pointer to a static string that is part of LangDef, don't free
    WCHAR * currLangCode;
    // whether the toolbar should be visible by default in the main window
    bool toolbarVisible;
    // whether the Favorites sidebar should be visible by default in the
    // main window
    bool favVisible;
    // if false, we won't ask the user if he wants Sumatra to handle PDF
    // files
    bool pdfAssociateDontAskAgain;
    // if pdfAssociateDontAskAgain is true, says whether we should silently
    // associate or not
    bool pdfAssociateShouldAssociate;
    // whether SumatraPDF should check once a day whether updates are
    // available
    bool enableAutoUpdate;
    // if true, we remember which files we opened and their settings
    bool rememberOpenedFiles;
    // whether to display documents black-on-white or in system colors
    bool useSysColors;
    // pattern used to launch the editor when doing inverse search
    WCHAR * inverseSearchCmdLine;
    // whether to expose the SyncTeX enhancements to the user
    bool enableTeXEnhancements;
    // When we show 'new version available', user has an option to check
    // 'skip this version'. This remembers which version is to be skipped.
    // If NULL - don't skip
    WCHAR * versionToSkip;
    // the time SumatraPDF has last checked for updates (cf.
    // EnableAutoUpdate)
    int64_t lastUpdateTime;
    // how pages should be layed out by default
    WCHAR * defaultDisplayMode;
    // the default zoom factor in % (negative values indicate virtual
    // settings)
    float defaultZoom;
    // default state of new SumatraPDF windows (same as the last closed)
    int windowState;
    // default position (can be on any monitor)
    RectI * windowPos;
    // whether the table of contents (Bookmarks) sidebar should be shown by
    // default when its available for a document
    bool tocVisible;
    // if sidebar (favorites and/or bookmarks) is visible, this is the
    // width of the left sidebar panel containing them
    int sidebarDx;
    // if both favorites and bookmarks parts of sidebar are visible, this
    // is the height of bookmarks (table of contents) part
    int tocDy;
    // whether to display Frequently Read documents or the About page in an
    // empty window
    bool showStartPage;
    // week count since 2011-01-01 needed to "age" openCount values in file
    // history
    int openCountWeek;
    // display CBX double pages from right to left
    bool cbxR2L;
    // Most values in this structure are remembered individually for every
    // file and are by default also persisted so that reading can be
    // resumed
    FileHistory ** fileHistory;
    size_t fileHistoryCount;
    // Values which are persisted for bookmarks/favorites
    Favorites ** favorites;
    size_t favoritesCount;
    // modification time of the preferences file when it was last read
    int64_t lastPrefUpdate;
    // a list of settings which this version of SumatraPDF didn't know how
    // to handle
    char * unknownSettings;
};

// this list contains a list of additional external viewers for various
// file types
struct ExternalViewers {
    // command line with which to call the external viewer, may contain %p
    // for page numer and %1 for the file name
    WCHAR * commandLine;
    // name of the external viewer to be shown in the menu (implied by
    // CommandLine if missing)
    WCHAR * name;
    // filter for which file types the menu item is to be shown (e.g.
    // "*.pdf;*.xps"; "*" if missing)
    WCHAR * filter;
};

// these values allow to customize how the forward search highlight
// appears
struct ForwardSearch3 {
    // when set to a positive value, the forward search highlight style
    // will be changed to a rectangle at the left of the page (with the
    // indicated amount of margin from the page margin)
    int highlightOffset;
    // the width of the highlight rectangle for when HighlightOffset is set
    int highlightWidth;
    // the color used for the forward search highlight
    COLORREF highlightColor;
    // whether the forward search highlight will remain visible until the
    // next mouse click instead of fading away instantly
    bool highlightPermanent;
};

// these values allow to change how far apart pages are layed out
struct PagePadding {
    // size of the left/right margin between window and document
    int outerX;
    // size of the top/bottom margin between window and document
    int outerY;
    // size of the horizontal margin between two pages
    int innerX;
    // size of the vertical margin between two pages
    int innerY;
};

// these values allow to override the default settings in the Print
// dialog
struct PrinterDefaults {
    // default value for scaling (shrink, fit, none)
    char * printScale;
    // default value for the compatibility option
    bool printAsImage;
};

// these values allow to tweak various bits and pieces of SumatraPDF
struct AdvancedPrefs {
    // whether the UI used for PDF documents will be used for ebooks as
    // well (enables printing and searching, disables automatic reflow)
    bool traditionalEbookUI;
    // whether opening a new document should happen in an already running
    // SumatraPDF instance so that there's only one process and documents
    // aren't opend twice
    bool reuseInstance;
    // background color of the non-document windows, traditionally yellow
    COLORREF mainWindowBackground;
    // whether the Esc key will exit SumatraPDF same as 'q'
    bool escToExit;
    // color value with which black (text) will be substituted
    COLORREF textColor;
    // color value with which white (background) will be substituted
    COLORREF pageColor;
};

// All values in this structure are read from SumatraPDF-user.ini and
// can't be changed from within the UI
struct UserPrefs {
    // these values allow to tweak various bits and pieces of SumatraPDF
    AdvancedPrefs * advancedPrefs;
    // these values allow to override the default settings in the Print
    // dialog
    PrinterDefaults * printerDefaults;
    // these values allow to change how far apart pages are layed out
    PagePadding * pagePadding;
    // these values allow to customize how the forward search highlight
    // appears
    ForwardSearch3 * forwardSearch3;
    // this list contains a list of additional external viewers for various
    // file types
    ExternalViewers ** externalViewers;
    size_t externalViewersCount;
};

enum SettingType {
    Type_Struct, Type_Array,
    Type_Bool, Type_Color, Type_Float, Type_Int, Type_Int64, Type_String, Type_Utf8String,
};

struct SettingInfo {
    const char *name;
    SettingType type;
    size_t offset;
    SettingInfo *substruct;
    int64_t def;
};
STATIC_ASSERT(sizeof(int64_t) >= sizeof(void *), ptr_is_max_64_bit);

#ifdef INCLUDE_APPPREFS3_METADATA
static SettingInfo gFavoritesInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)3, sizeof(Favorites), NULL },
    { "Name", Type_String, offsetof(Favorites, name), NULL, NULL },
    { "PageLabel", Type_String, offsetof(Favorites, pageLabel), NULL, NULL },
    { "PageNo", Type_Int, offsetof(Favorites, pageNo), NULL, 0 },
};

static SettingInfo gPointIInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)2, sizeof(PointI), NULL },
    { "X", Type_Int, offsetof(PointI, x), NULL, 0 },
    { "Y", Type_Int, offsetof(PointI, y), NULL, 0 },
};

static SettingInfo gRectIInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)4, sizeof(RectI), NULL },
    { "Dx", Type_Int, offsetof(RectI, dx), NULL, 0 },
    { "Dy", Type_Int, offsetof(RectI, dy), NULL, 0 },
    { "X", Type_Int, offsetof(RectI, x), NULL, 0 },
    { "Y", Type_Int, offsetof(RectI, y), NULL, 0 },
};

static SettingInfo gFileHistoryInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)17, sizeof(FileHistory), NULL },
    { "DecryptionKey", Type_Utf8String, offsetof(FileHistory, decryptionKey), NULL, NULL },
    { "DisplayMode", Type_String, offsetof(FileHistory, displayMode), NULL, (int64_t)L"automatic" },
    { "FilePath", Type_String, offsetof(FileHistory, filePath), NULL, NULL },
    { "IsMissing", Type_Bool, offsetof(FileHistory, isMissing), NULL, false },
    { "IsPinned", Type_Bool, offsetof(FileHistory, isPinned), NULL, false },
    { "OpenCount", Type_Int, offsetof(FileHistory, openCount), NULL, 0 },
    { "PageNo", Type_Int, offsetof(FileHistory, pageNo), NULL, 1 },
    { "ReparseIdx", Type_Int, offsetof(FileHistory, reparseIdx), NULL, 0 },
    { "Rotation", Type_Int, offsetof(FileHistory, rotation), NULL, 0 },
    { "ScrollPos", Type_Struct, offsetof(FileHistory, scrollPos), gPointIInfo, NULL },
    { "SidebarDx", Type_Int, offsetof(FileHistory, sidebarDx), NULL, 0 },
    { "TocState", Type_Utf8String, offsetof(FileHistory, tocState), NULL, NULL },
    { "TocVisible", Type_Bool, offsetof(FileHistory, tocVisible), NULL, true },
    { "UseGlobalValues", Type_Bool, offsetof(FileHistory, useGlobalValues), NULL, false },
    { "WindowPos", Type_Struct, offsetof(FileHistory, windowPos), gRectIInfo, NULL },
    { "WindowState", Type_Int, offsetof(FileHistory, windowState), NULL, 0 },
    { "ZoomVirtual", Type_Float, offsetof(FileHistory, zoomVirtual), NULL, 100 },
};

static SettingInfo gGlobalPrefsInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)27, sizeof(GlobalPrefs), NULL },
    { "CbxR2L", Type_Bool, offsetof(GlobalPrefs, cbxR2L), NULL, false },
    { "CurrLangCode", Type_String, offsetof(GlobalPrefs, currLangCode), NULL, NULL },
    { "DefaultDisplayMode", Type_String, offsetof(GlobalPrefs, defaultDisplayMode), NULL, (int64_t)L"automatic" },
    { "DefaultZoom", Type_Float, offsetof(GlobalPrefs, defaultZoom), NULL, -1 },
    { "EnableAutoUpdate", Type_Bool, offsetof(GlobalPrefs, enableAutoUpdate), NULL, true },
    { "EnableTeXEnhancements", Type_Bool, offsetof(GlobalPrefs, enableTeXEnhancements), NULL, false },
    { "FavVisible", Type_Bool, offsetof(GlobalPrefs, favVisible), NULL, false },
    { "Favorites", Type_Array, offsetof(GlobalPrefs, favorites), gFavoritesInfo, NULL },
    { NULL, Type_Array, offsetof(GlobalPrefs, favoritesCount), gFavoritesInfo, NULL },
    { "FileHistory", Type_Array, offsetof(GlobalPrefs, fileHistory), gFileHistoryInfo, NULL },
    { NULL, Type_Array, offsetof(GlobalPrefs, fileHistoryCount), gFileHistoryInfo, NULL },
    { "GlobalPrefsOnly", Type_Bool, offsetof(GlobalPrefs, globalPrefsOnly), NULL, false },
    { "InverseSearchCmdLine", Type_String, offsetof(GlobalPrefs, inverseSearchCmdLine), NULL, NULL },
    { "LastUpdateTime", Type_Int64, offsetof(GlobalPrefs, lastUpdateTime), NULL, 0 },
    { "OpenCountWeek", Type_Int, offsetof(GlobalPrefs, openCountWeek), NULL, 0 },
    { "PdfAssociateDontAskAgain", Type_Bool, offsetof(GlobalPrefs, pdfAssociateDontAskAgain), NULL, false },
    { "PdfAssociateShouldAssociate", Type_Bool, offsetof(GlobalPrefs, pdfAssociateShouldAssociate), NULL, false },
    { "RememberOpenedFiles", Type_Bool, offsetof(GlobalPrefs, rememberOpenedFiles), NULL, true },
    { "ShowStartPage", Type_Bool, offsetof(GlobalPrefs, showStartPage), NULL, true },
    { "SidebarDx", Type_Int, offsetof(GlobalPrefs, sidebarDx), NULL, 0 },
    { "TocDy", Type_Int, offsetof(GlobalPrefs, tocDy), NULL, 0 },
    { "TocVisible", Type_Bool, offsetof(GlobalPrefs, tocVisible), NULL, true },
    { "ToolbarVisible", Type_Bool, offsetof(GlobalPrefs, toolbarVisible), NULL, true },
    { "UseSysColors", Type_Bool, offsetof(GlobalPrefs, useSysColors), NULL, false },
    { "VersionToSkip", Type_String, offsetof(GlobalPrefs, versionToSkip), NULL, NULL },
    { "WindowPos", Type_Struct, offsetof(GlobalPrefs, windowPos), gRectIInfo, NULL },
    { "WindowState", Type_Int, offsetof(GlobalPrefs, windowState), NULL, 1 },
};

static SettingInfo gAdvancedPrefsInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)6, sizeof(AdvancedPrefs), NULL },
    { "EscToExit", Type_Bool, offsetof(AdvancedPrefs, escToExit), NULL, false },
    { "MainWindowBackground", Type_Color, offsetof(AdvancedPrefs, mainWindowBackground), NULL, 0xfff200 },
    { "PageColor", Type_Color, offsetof(AdvancedPrefs, pageColor), NULL, 0xffffff },
    { "ReuseInstance", Type_Bool, offsetof(AdvancedPrefs, reuseInstance), NULL, false },
    { "TextColor", Type_Color, offsetof(AdvancedPrefs, textColor), NULL, 0x000000 },
    { "TraditionalEbookUI", Type_Bool, offsetof(AdvancedPrefs, traditionalEbookUI), NULL, false },
};

static SettingInfo gExternalViewersInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)3, sizeof(ExternalViewers), NULL },
    { "CommandLine", Type_String, offsetof(ExternalViewers, commandLine), NULL, NULL },
    { "Filter", Type_String, offsetof(ExternalViewers, filter), NULL, NULL },
    { "Name", Type_String, offsetof(ExternalViewers, name), NULL, NULL },
};

static SettingInfo gForwardSearch3Info[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)4, sizeof(ForwardSearch3), NULL },
    { "HighlightColor", Type_Color, offsetof(ForwardSearch3, highlightColor), NULL, 0x6581ff },
    { "HighlightOffset", Type_Int, offsetof(ForwardSearch3, highlightOffset), NULL, 0 },
    { "HighlightPermanent", Type_Bool, offsetof(ForwardSearch3, highlightPermanent), NULL, false },
    { "HighlightWidth", Type_Int, offsetof(ForwardSearch3, highlightWidth), NULL, 15 },
};

static SettingInfo gPagePaddingInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)4, sizeof(PagePadding), NULL },
    { "InnerX", Type_Int, offsetof(PagePadding, innerX), NULL, 4 },
    { "InnerY", Type_Int, offsetof(PagePadding, innerY), NULL, 4 },
    { "OuterX", Type_Int, offsetof(PagePadding, outerX), NULL, 4 },
    { "OuterY", Type_Int, offsetof(PagePadding, outerY), NULL, 2 },
};

static SettingInfo gPrinterDefaultsInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)2, sizeof(PrinterDefaults), NULL },
    { "PrintAsImage", Type_Bool, offsetof(PrinterDefaults, printAsImage), NULL, false },
    { "PrintScale", Type_Utf8String, offsetof(PrinterDefaults, printScale), NULL, (int64_t)"shrink" },
};

static SettingInfo gUserPrefsInfo[] = {
    /* TODO: replace this hack with a second meta-struct? */
    { NULL, (SettingType)6, sizeof(UserPrefs), NULL },
    { "AdvancedPrefs", Type_Struct, offsetof(UserPrefs, advancedPrefs), gAdvancedPrefsInfo, NULL },
    { "ExternalViewers", Type_Array, offsetof(UserPrefs, externalViewers), gExternalViewersInfo, NULL },
    { NULL, Type_Array, offsetof(UserPrefs, externalViewersCount), gExternalViewersInfo, NULL },
    { "ForwardSearch3", Type_Struct, offsetof(UserPrefs, forwardSearch3), gForwardSearch3Info, NULL },
    { "PagePadding", Type_Struct, offsetof(UserPrefs, pagePadding), gPagePaddingInfo, NULL },
    { "PrinterDefaults", Type_Struct, offsetof(UserPrefs, printerDefaults), gPrinterDefaultsInfo, NULL },
};
#endif

#endif
