diff -rPu5 openjpeg.orig\cio.c openjpeg\cio.c
--- openjpeg.orig\cio.c	Sat May 18 20:52:42 2013
+++ openjpeg\cio.c	Sat Jun 01 18:06:44 2013
@@ -254,16 +254,22 @@
 }
 
 void OPJ_CALLCONV opj_stream_set_user_data(opj_stream_t* p_stream, void * p_data)
 {
 	opj_stream_private_t* l_stream = (opj_stream_private_t*) p_stream;
+	/* SumatraPDF: for consistency with opj_stream_set_* */
+	if (!l_stream)
+		return;
 	l_stream->m_user_data = p_data;
 }
 
 void OPJ_CALLCONV opj_stream_set_user_data_length(opj_stream_t* p_stream, OPJ_UINT64 data_length)
 {
 	opj_stream_private_t* l_stream = (opj_stream_private_t*) p_stream;
+	/* SumatraPDF: for consistency with opj_stream_set_* */
+	if (!l_stream)
+		return;
 	l_stream->m_user_data_length = data_length;
 }
 
 OPJ_SIZE_T opj_stream_read_data (opj_stream_private_t * p_stream,OPJ_BYTE * p_buffer, OPJ_SIZE_T p_size, opj_event_mgr_t * p_event_mgr)
 {
diff -rPu5 openjpeg.orig\j2k.c openjpeg\j2k.c
--- openjpeg.orig\j2k.c	Sat May 18 20:52:42 2013
+++ openjpeg\j2k.c	Fri Jun 14 21:24:16 2013
@@ -1930,10 +1930,21 @@
         if (l_image->numcomps != l_nb_comp) {
                 opj_event_msg(p_manager, EVT_ERROR, "Error with SIZ marker: number of component is not compatible with the remaining number of parameters ( %d vs %d)\n", l_image->numcomps, l_nb_comp);
                 return OPJ_FALSE;
         }
 
+        /* testcase 4035.pdf.SIGSEGV.d8b.3375 */
+        if (l_image->x0 > l_image->x1 || l_image->y0 > l_image->y1) {
+                opj_event_msg(p_manager, EVT_ERROR, "Error with SIZ marker: negative image size (%d x %d)\n", l_image->x1 - l_image->x0, l_image->y1 - l_image->y0);
+                return OPJ_FALSE;
+        }
+        /* testcase 2539.pdf.SIGFPE.706.1712 (also 3622.pdf.SIGFPE.706.2916 and 4008.pdf.SIGFPE.706.3345 and maybe more) */
+        if (!(l_cp->tdx * l_cp->tdy)) {
+                opj_event_msg(p_manager, EVT_ERROR, "Error with SIZ marker: invalid tile size (tdx: %d, tdy: %d)\n", l_cp->tdx, l_cp->tdy);
+                return OPJ_FALSE;
+        }
+
 #ifdef USE_JPWL
         if (l_cp->correct) {
                 /* if JPWL is on, we check whether TX errors have damaged
                   too much the SIZ parameters */
                 if (!(l_image->x1 * l_image->y1)) {
@@ -3873,10 +3884,16 @@
 
         l_cp = &(p_j2k->m_cp);
         opj_read_bytes(p_header_data,&(p_j2k->m_current_tile_number),2);                /* Isot */
         p_header_data+=2;
 
+        /* testcase 2.pdf.SIGFPE.706.1112 */
+        if (p_j2k->m_current_tile_number >= l_cp->tw * l_cp->th) {
+                opj_event_msg(p_manager, EVT_ERROR, "Invalid tile number %d\n", p_j2k->m_current_tile_number);
+                return OPJ_FALSE;
+        }
+
         l_tcp = &l_cp->tcps[p_j2k->m_current_tile_number];
         l_tile_x = p_j2k->m_current_tile_number % l_cp->tw;
         l_tile_y = p_j2k->m_current_tile_number / l_cp->tw;
 
 #ifdef USE_JPWL
@@ -3959,10 +3976,17 @@
                 ++p_header_data;
 
                 opj_read_bytes(p_header_data,&l_num_parts ,1);          /* TNsot */
                 ++p_header_data;
 
+                /* testcase 451.pdf.SIGSEGV.ce9.3723 */
+                if (l_num_parts && l_current_part >= l_num_parts) {
+                        opj_event_msg(p_manager, EVT_ERROR, "In SOT marker, TPSot (%d) is not valid regards to TNsot (%d), giving up\n", l_current_part, l_num_parts);
+                        p_j2k->m_specific_param.m_decoder.m_last_tile_part = 1;
+                        return OPJ_FALSE;
+                }
+
                 if (l_num_parts != 0) { /* Number of tile-part header is provided by this tile-part header */
                         /* Useful to manage the case of textGBR.jp2 file because two values of TNSot are allowed: the correct numbers of
                          * tile-parts for that tile and zero (A.4.2 of 15444-1 : 2002). */
                         if (l_tcp->m_nb_tile_parts) {
                                 if (l_current_part >= l_tcp->m_nb_tile_parts){
@@ -4434,10 +4458,18 @@
                         }
                 }
         };
 #endif /* USE_JPWL */
 
+        /* testcase 3635.pdf.asan.77.2930 */
+        if (l_comp_room >= l_nb_comp) {
+                opj_event_msg(p_manager, EVT_ERROR,
+                        "JPWL: bad component number in RGN (%d when there are only %d)\n",
+                        l_comp_room, l_nb_comp);
+                return OPJ_FALSE;
+        }
+
         opj_read_bytes(p_header_data,(OPJ_UINT32 *) (&(l_tcp->tccps[l_comp_no].roishift)),1);   /* SPrgn */
         ++p_header_data;
 
         return OPJ_TRUE;
 
@@ -5806,10 +5838,11 @@
         */
 
         if (parameters->tile_size_on) {
                 cp->tw = opj_int_ceildiv(image->x1 - cp->tx0, cp->tdx);
                 cp->th = opj_int_ceildiv(image->y1 - cp->ty0, cp->tdy);
+                assert(cp->tw * cp->th > 0); /*MUPDF*/
         } else {
                 cp->tdx = image->x1 - cp->tx0;
                 cp->tdy = image->y1 - cp->ty0;
         }
 
@@ -5910,11 +5943,13 @@
                 tcp->POC = 0;
 
                 if (parameters->numpocs) {
                         /* initialisation of POC */
                         tcp->POC = 1;
-                        for (i = 0; i < parameters->numpocs; i++) {
+                        /* cf. http://code.google.com/p/openjpeg/issues/detail?id=165 */
+                        assert(parameters->numpocs <= 32); /*MUPDF*/
+                        for (i = 0; i < opj_uint_min(parameters->numpocs, 32); i++) {
                                 if (tileno + 1 == parameters->POC[i].tile )  {
                                         opj_poc_t *tcp_poc = &tcp->pocs[numpocs_tile];
 
                                         tcp_poc->resno0         = parameters->POC[numpocs_tile].resno0;
                                         tcp_poc->compno0        = parameters->POC[numpocs_tile].compno0;
@@ -7049,10 +7084,12 @@
                         /* Read 2 bytes from the buffer as the marker size */
                         opj_read_bytes(p_j2k->m_specific_param.m_decoder.m_header_data,&l_marker_size,2);
 
                         /* Why this condition? FIXME */
                         if (p_j2k->m_specific_param.m_decoder.m_state & J2K_STATE_TPH){
+                                /* testcase 2236.pdf.SIGSEGV.398.1376 */
+                                // doesn't hold, harmless(?): assert(p_j2k->m_specific_param.m_decoder.m_sot_length >= l_marker_size + 2);
                                 p_j2k->m_specific_param.m_decoder.m_sot_length -= (l_marker_size + 2);
                         }
                         l_marker_size -= 2; /* Subtract the size of the marker ID already read */
 
                         /* Get the marker handler from the marker ID */
@@ -7280,10 +7317,16 @@
                         return OPJ_FALSE;
                 }
 
                 opj_read_bytes(l_data,&l_current_marker,2);
 
+                /* cf. https://code.google.com/p/sumatrapdf/issues/detail?id=2325 */
+                if (l_current_marker == 0x8080 && opj_stream_get_number_byte_left(p_stream) == 2) {
+                        opj_stream_read_data(p_stream, l_data, 2, p_manager);
+                        opj_read_bytes(l_data, &l_current_marker, 2);
+                }
+
                 if (l_current_marker == J2K_MS_EOC) {
                         p_j2k->m_current_tile_number = 0;
                         p_j2k->m_specific_param.m_decoder.m_state =  0x0100;/*FIXME J2K_DEC_STATE_EOC;*/
                 }
                 else if (l_current_marker != J2K_MS_SOT)
@@ -7438,10 +7481,14 @@
                                 l_offset_y1_src = l_res->y1 - l_y1_dest;
                         }
                 }
 
                 if( (l_offset_x0_src < 0 ) || (l_offset_y0_src < 0 ) || (l_offset_x1_src < 0 ) || (l_offset_y1_src < 0 ) ){
+                        return OPJ_FALSE;
+                }
+                /* testcase 2977.pdf.asan.67.2198 */
+                if ((OPJ_INT32)l_width_dest < 0 || (OPJ_INT32)l_height_dest < 0) {
                         return OPJ_FALSE;
                 }
                 /*-----*/
 
                 /* Compute the input buffer offset */
diff -rPu5 openjpeg.orig\jp2.c openjpeg\jp2.c
--- openjpeg.orig\jp2.c	Sat May 18 20:52:42 2013
+++ openjpeg\jp2.c	Fri Jun 14 20:49:58 2013
@@ -774,10 +774,17 @@
 			opj_malloc(nr_channels * sizeof(opj_image_comp_t));
 
 	for(i = 0; i < nr_channels; ++i) {
 		pcol = cmap[i].pcol; cmp = cmap[i].cmp;
 
+		/* testcase 451.pdf.SIGSEGV.f4c.3723 */
+		if (cmp >= image->numcomps) {
+			/* TODO: is there a better place to validate the channel index? */
+			fprintf(stderr, "invalid channel index %d\n", cmp);
+			cmp = 0;
+		}
+
 		new_comps[pcol] = old_comps[cmp];
 
 		/* Direct use */
 		if(cmap[i].mtyp == 0){
 			old_comps[cmp].data = NULL; continue;
@@ -796,10 +803,16 @@
 		/* Direct use: */
 		if(cmap[i].mtyp == 0) continue;
 
 		/* Palette mapping: */
 		cmp = cmap[i].cmp; pcol = cmap[i].pcol;
+		/* testcase 451.pdf.SIGSEGV.f4c.3723 */
+		if (cmp >= image->numcomps) {
+			/* TODO: is there a better place to validate the channel index? */
+			fprintf(stderr, "invalid channel index %d\n", cmp);
+			cmp = 0;
+		}
 		src = old_comps[cmp].data;
 		dst = new_comps[pcol].data;
 		max = new_comps[pcol].w * new_comps[pcol].h;
 
 		for(j = 0; j < max; ++j)
@@ -958,10 +971,17 @@
 		cmap[i].mtyp = (OPJ_BYTE) l_value;
 
 		opj_read_bytes(p_cmap_header_data, &l_value, 1);			/* PCOL^i */
 		++p_cmap_header_data;
 		cmap[i].pcol = (OPJ_BYTE) l_value;
+
+		/* testcase 451.pdf.SIGSEGV.5b5.3723 */
+		if (cmap[i].pcol >= nr_channels) {
+			opj_event_msg(p_manager, EVT_ERROR, "Invalid palette index %d.\n", l_value);
+			opj_free(cmap);
+			return OPJ_FALSE;
+		}
 	}
 
 	jp2->color.jp2_pclr->cmap = cmap;
 
 	return OPJ_TRUE;
@@ -981,10 +1001,17 @@
 		if((asoc = info[i].asoc) == 0) continue;
 
 		cn = info[i].cn; 
         acn = asoc - 1;
 
+		/* testcase 4149.pdf.SIGSEGV.cf7.3501 */
+		if (cn != acn && (cn >= image->numcomps || acn >= image->numcomps)) {
+			/* TODO: is there a better place to validate these indices? */
+			fprintf(stderr, "invalid component index %d/%d\n", cn, acn);
+			cn = acn = 0;
+		}
+
 		if(cn != acn)
 		{
 			opj_image_comp_t saved;
 
 			memcpy(&saved, &image->comps[cn], sizeof(opj_image_comp_t));
@@ -1683,18 +1710,24 @@
 		else if	(box.length == 0) {
 			opj_event_msg(p_manager, EVT_ERROR, "Cannot handle box of undefined sizes\n");
 			opj_free(l_current_data);
 			return OPJ_FALSE;
 		}
+		/* testcase 1851.pdf.SIGSEGV.ce9.948 */
+		else if	(box.length < l_nb_bytes_read) {
+			opj_event_msg(p_manager, EVT_ERROR, "invalid box size %d (%x)\n", box.length, box.type);
+			opj_free(l_current_data);
+			return OPJ_FALSE;
+		}
 
 		l_current_handler = opj_jp2_find_handler(box.type);
 		l_current_data_size = box.length - l_nb_bytes_read;
 
 		if (l_current_handler != 00) {
 			if (l_current_data_size > l_last_data_size) {
 				OPJ_BYTE* new_current_data = (OPJ_BYTE*)opj_realloc(l_current_data,l_current_data_size);
-				if (!l_current_data){
+				if (!new_current_data){
 					opj_free(l_current_data);
                     opj_event_msg(p_manager, EVT_ERROR, "Not enough memory to handle jpeg2000 box\n");
 					return OPJ_FALSE;
 				}
                 l_current_data = new_current_data;
diff -rPu5 openjpeg.orig\opj_config.h openjpeg\opj_config.h
--- openjpeg.orig\opj_config.h	Thu Jan 01 01:00:00 1970
+++ openjpeg\opj_config.h	Sun May 19 03:54:43 2013
@@ -0,0 +1 @@
+// #define OPJ_HAVE_STDINT_H
diff -rPu5 openjpeg.orig\opj_config_private.h openjpeg\opj_config_private.h
--- openjpeg.orig\opj_config_private.h	Thu Jan 01 01:00:00 1970
+++ openjpeg\opj_config_private.h	Sun May 19 03:54:40 2013
@@ -0,0 +1,9 @@
+#define OPJ_PACKAGE_VERSION "2.0.0"
+
+// #define OPJ_HAVE_INTTYPES_H
+// #define OPJ_HAVE_FSEEKO
+
+#define OPJ_STATIC
+#define OPJ_EXPORTS
+
+#define USE_JPIP
diff -rPu5 openjpeg.orig\opj_malloc.h openjpeg\opj_malloc.h
--- openjpeg.orig\opj_malloc.h	Sat May 18 20:52:42 2013
+++ openjpeg\opj_malloc.h	Sat Jun 01 18:06:44 2013
@@ -58,11 +58,12 @@
 @return Returns a void pointer to the allocated space, or NULL if there is insufficient memory available
 */
 #ifdef ALLOC_PERF_OPT
 void * OPJ_CALLCONV opj_calloc(size_t _NumOfElements, size_t _SizeOfElements);
 #else
-#define opj_calloc(num, size) calloc(num, size)
+/* SumatraPDF: don't assert when num * size overflows */
+#define opj_calloc(num, size) ((size_t)(num) >= (size_t)-0x100 / (size_t)(size) ? NULL : calloc(num, size))
 #endif
 
 /**
 Allocate memory aligned to a 16 byte boundry
 @param size Bytes to allocate
@@ -137,11 +138,12 @@
 @return Returns a void pointer to the reallocated (and possibly moved) memory block
 */
 #ifdef ALLOC_PERF_OPT
 void * OPJ_CALLCONV opj_realloc(void * m, size_t s);
 #else
-#define opj_realloc(m, s) realloc(m, s)
+/* SumatraPDF: TODO: MSVCRT seems to assert if s is too large(?) e.g. for 2236.pdf.asan.40.1376 */
+#define opj_realloc(m, s) ((ptrdiff_t)(s) < 0 ? NULL : realloc(m, s))
 #endif
 
 /**
 Deallocates or frees a memory block.
 @param m Previously allocated memory block to be freed
diff -rPu5 openjpeg.orig\t2.c openjpeg\t2.c
--- openjpeg.orig\t2.c	Sat May 18 20:52:42 2013
+++ openjpeg\t2.c	Fri Jun 14 20:49:58 2013
@@ -979,10 +979,15 @@
                         n = l_cblk->numnewpasses;
 
                         do {
                                 l_cblk->segs[l_segno].numnewpasses = opj_int_min(l_cblk->segs[l_segno].maxpasses - l_cblk->segs[l_segno].numpasses, n);
                                 l_cblk->segs[l_segno].newlen = opj_bio_read(l_bio, l_cblk->numlenbits + opj_uint_floorlog2(l_cblk->segs[l_segno].numnewpasses));
+                                /* testcase 1802.pdf.SIGSEGV.36e.894 */
+                                if (l_cblk->segs[l_segno].newlen > *l_modified_length_ptr) {
+                                        opj_bio_destroy(l_bio);
+                                        return OPJ_FALSE;
+                                }
 
                                 n -= l_cblk->segs[l_segno].numnewpasses;
                                 if (n > 0) {
                                         ++l_segno;
 
@@ -1114,10 +1119,11 @@
                                 /* Check if the cblk->data have allocated enough memory */
                                 if ((l_cblk->data_current_size + l_seg->newlen) > l_cblk->data_max_size) {
                                     OPJ_BYTE* new_cblk_data = (OPJ_BYTE*) opj_realloc(l_cblk->data, l_cblk->data_current_size + l_seg->newlen);
                                     if(! new_cblk_data) {
                                         opj_free(l_cblk->data);
+                                        l_cblk->data = NULL;
                                         l_cblk->data_max_size = 0;
                                         /* opj_event_msg(p_manager, EVT_ERROR, "Not enough memory to realloc code block cata!\n"); */
                                         return OPJ_FALSE;
                                     }
                                     l_cblk->data_max_size = l_cblk->data_current_size + l_seg->newlen;
diff -rPu5 openjpeg.orig\tcd.c openjpeg\tcd.c
--- openjpeg.orig\tcd.c	Sat May 18 20:52:42 2013
+++ openjpeg\tcd.c	Fri Jun 14 20:49:58 2013
@@ -661,10 +661,15 @@
         /* 4 borders of the tile rescale on the image if necessary */                                                                                                                                             \
         l_tile->x0 = opj_int_max(l_cp->tx0 + p * l_cp->tdx, l_image->x0);                                                                                                                                             \
         l_tile->y0 = opj_int_max(l_cp->ty0 + q * l_cp->tdy, l_image->y0);                                                                                                                                             \
         l_tile->x1 = opj_int_min(l_cp->tx0 + (p + 1) * l_cp->tdx, l_image->x1);                                                                                                                                       \
         l_tile->y1 = opj_int_min(l_cp->ty0 + (q + 1) * l_cp->tdy, l_image->y1);                                                                                                                                       \
+        /* testcase 1888.pdf.asan.35.988 */ \
+        if (l_tccp->numresolutions == 0) { \
+            fprintf(stderr, "tiles require at least one resolution\n"); \
+            return OPJ_FALSE; \
+        } \
         /*fprintf(stderr, "Tile border = %d,%d,%d,%d\n", l_tile->x0, l_tile->y0,l_tile->x1,l_tile->y1);*/                                                                                                         \
                                                                     \
         /*tile->numcomps = image->numcomps; */                      \
         for(compno = 0; compno < l_tile->numcomps; ++compno) {      \
                 /*fprintf(stderr, "compno = %d/%d\n", compno, l_tile->numcomps);*/                                                                                                                                \
@@ -672,10 +677,16 @@
                 /* border of each l_tile component (global) */      \
                 l_tilec->x0 = opj_int_ceildiv(l_tile->x0, l_image_comp->dx);                                                                                                                                          \
                 l_tilec->y0 = opj_int_ceildiv(l_tile->y0, l_image_comp->dy);                                                                                                                                          \
                 l_tilec->x1 = opj_int_ceildiv(l_tile->x1, l_image_comp->dx);                                                                                                                                          \
                 l_tilec->y1 = opj_int_ceildiv(l_tile->y1, l_image_comp->dy);                                                                                                                                          \
+                /* testcase 1336.pdf.asan.47.376 */ \
+                if (compno > 0 && (l_tilec->x1 - l_tilec->x0 != l_tile->comps->x1 - l_tile->comps->x0) || \
+                                  (l_tilec->y1 - l_tilec->y0 != l_tile->comps->y1 - l_tile->comps->y0)) { \
+                    fprintf(stderr, "tiles don't all have the same dimension: %d x %d and %d x %d\n", l_tilec->x1 - l_tilec->x0, l_tilec->y1 - l_tilec->y0, l_tile->comps->x1 - l_tile->comps->x0, l_tile->comps->y1 - l_tile->comps->y0); \
+                    return OPJ_FALSE; \
+                } \
                 /*fprintf(stderr, "\tTile compo border = %d,%d,%d,%d\n", l_tilec->x0, l_tilec->y0,l_tilec->x1,l_tilec->y1);*/                                                                                     \
                                                                     \
                 l_data_size = (l_tilec->x1 - l_tilec->x0)           \
                 * (l_tilec->y1 - l_tilec->y0) * sizeof(OPJ_UINT32 );\
                 l_tilec->numresolutions = l_tccp->numresolutions;   \
@@ -1651,10 +1662,12 @@
         for (compno = 0; compno < l_tile->numcomps; compno++) {
                 l_res = l_tile_comp->resolutions + l_img_comp->resno_decoded;
                 l_width = (l_res->x1 - l_res->x0);
                 l_height = (l_res->y1 - l_res->y0);
                 l_stride = (l_tile_comp->x1 - l_tile_comp->x0) - l_width;
+
+                assert(l_height == 0 || l_width + l_stride <= l_tile_comp->data_size / l_height); /*MUPDF*/
 
                 if (l_img_comp->sgnd) {
                         l_min = -(1 << (l_img_comp->prec - 1));
                         l_max = (1 << (l_img_comp->prec - 1)) - 1;
                 }
