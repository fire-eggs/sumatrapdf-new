diff -rPu5 jbig2dec.orig\jbig2.c jbig2dec\jbig2.c
--- jbig2dec.orig\jbig2.c	Fri May 24 17:23:20 2013
+++ jbig2dec\jbig2.c	Thu May 30 17:27:47 2013
@@ -388,11 +388,10 @@
 	    return 0;
 	  return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1,
 		      "Garbage beyond end of file");
 	}
     }
-  return 0;
 }
 
 void
 jbig2_ctx_free (Jbig2Ctx *ctx)
 {
diff -rPu5 jbig2dec.orig\jbig2_huffman.c jbig2dec\jbig2_huffman.c
--- jbig2dec.orig\jbig2_huffman.c	Fri May 24 17:23:20 2013
+++ jbig2dec\jbig2_huffman.c	Thu May 30 17:28:30 2013
@@ -563,11 +563,11 @@
         const size_t lines_data_bitlen = (segment->data_length - 9) * 8;    /* length in bit */
         /* bit offset: controls bit reading */
         size_t boffset = 0;
         /* B.2 4) */
         int32_t CURRANGELOW = HTLOW;
-        int NTEMP = 0;
+        size_t NTEMP = 0;
 
 #ifdef JBIG2_DEBUG
         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, segment->number, 
             "DECODING USER TABLE... Flags: %d, HTOOB: %d, HTPS: %d, HTRS: %d, HTLOW: %d, HTHIGH: %d", 
             code_table_flags, HTOOB, HTPS, HTRS, HTLOW, HTHIGH);
diff -rPu5 jbig2dec.orig\jbig2_segment.c jbig2dec\jbig2_segment.c
--- jbig2dec.orig\jbig2_segment.c	Fri May 24 17:23:20 2013
+++ jbig2dec\jbig2_segment.c	Thu May 30 17:26:29 2013
@@ -242,12 +242,10 @@
             } else {
                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number,
                     "unhandled extension segment");
             }
     }
-
-    return 0;
 }
 
 /* general segment parsing dispatch */
 int jbig2_parse_segment (Jbig2Ctx *ctx, Jbig2Segment *segment,
 			 const uint8_t *segment_data)
diff -rPu5 jbig2dec.orig\jbig2_symbol_dict.c jbig2dec\jbig2_symbol_dict.c
--- jbig2dec.orig\jbig2_symbol_dict.c	Wed May 29 22:46:18 2013
+++ jbig2dec\jbig2_symbol_dict.c	Fri May 31 20:28:08 2013
@@ -440,11 +440,14 @@
               goto cleanup4;
           }
 
 		  code = jbig2_decode_generic_region(ctx, segment, &region_params,
               as, image, GB_stats);
-          if (code < 0) goto cleanup4;
+          if (code < 0) {
+              jbig2_image_release(ctx, image);
+              goto cleanup4;
+          }
 
           SDNEWSYMS->glyphs[NSYMSDECODED] = image;
 	      } else {
           /* 6.5.8.2 refinement/aggregate symbol */
           uint32_t REFAGGNINST;
diff -rPu5 jbig2dec.orig\jbig2_text.c jbig2dec\jbig2_text.c
--- jbig2dec.orig\jbig2_text.c	Wed May 29 22:46:18 2013
+++ jbig2dec\jbig2_text.c	Thu May 30 19:32:24 2013
@@ -849,11 +849,11 @@
 
     image = jbig2_image_new(ctx, region_info.width, region_info.height);
     if (image == NULL) {
         code =jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
             "couldn't allocate text region image");
-        goto cleanup1;
+        goto cleanup2;
     }
 
     ws = jbig2_word_stream_buf_new(ctx, segment_data + offset, segment->data_length - offset);
     if (ws == NULL)
     {
@@ -949,11 +949,11 @@
     }
     jbig2_free(ctx->allocator, as);
     jbig2_word_stream_buf_free(ctx, ws);
 
 cleanup2:
-    if (!params.SBHUFF && params.SBREFINE) {
+    {
         jbig2_free(ctx->allocator, GR_stats);
     }
     jbig2_image_release(ctx, image);
 
 cleanup1:
