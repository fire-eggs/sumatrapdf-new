diff -rPu5 jbig2dec.orig\jbig2.c jbig2dec\jbig2.c
--- jbig2dec.orig\jbig2.c	Fri May 24 17:23:20 2013
+++ jbig2dec\jbig2.c	Thu May 30 17:27:47 2013
@@ -388,11 +388,10 @@
 	    return 0;
 	  return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, -1,
 		      "Garbage beyond end of file");
 	}
     }
-  return 0;
 }
 
 void
 jbig2_ctx_free (Jbig2Ctx *ctx)
 {
diff -rPu5 jbig2dec.orig\jbig2_huffman.c jbig2dec\jbig2_huffman.c
--- jbig2dec.orig\jbig2_huffman.c	Fri May 24 17:23:20 2013
+++ jbig2dec\jbig2_huffman.c	Wed Jun 12 21:22:40 2013
@@ -412,18 +412,21 @@
   result = jbig2_new(ctx, Jbig2HuffmanTable, 1);
   if (result == NULL)
   {
     jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1,
         "couldn't allocate result storage in jbig2_build_huffman_table");
+    jbig2_free(ctx->allocator, LENCOUNT);
     return NULL;
   }
   result->log_table_size = log_table_size;
   entries = jbig2_new(ctx, Jbig2HuffmanEntry, max_j);
   if (entries == NULL)
   {
     jbig2_error(ctx, JBIG2_SEVERITY_FATAL, -1,
         "couldn't allocate entries storage in jbig2_build_huffman_table");
+    jbig2_free(ctx->allocator, result);
+    jbig2_free(ctx->allocator, LENCOUNT);
     return NULL;
   }
   /* fill now to catch missing JBIG2Globals later */
   memset(entries, 0xFF, sizeof(Jbig2HuffmanEntry)*max_j);
   result->entries = entries;
@@ -563,11 +566,11 @@
         const size_t lines_data_bitlen = (segment->data_length - 9) * 8;    /* length in bit */
         /* bit offset: controls bit reading */
         size_t boffset = 0;
         /* B.2 4) */
         int32_t CURRANGELOW = HTLOW;
-        int NTEMP = 0;
+        size_t NTEMP = 0;
 
 #ifdef JBIG2_DEBUG
         jbig2_error(ctx, JBIG2_SEVERITY_DEBUG, segment->number, 
             "DECODING USER TABLE... Flags: %d, HTOOB: %d, HTPS: %d, HTRS: %d, HTLOW: %d, HTHIGH: %d", 
             code_table_flags, HTOOB, HTPS, HTRS, HTLOW, HTHIGH);
diff -rPu5 jbig2dec.orig\jbig2_mmr.c jbig2dec\jbig2_mmr.c
--- jbig2dec.orig\jbig2_mmr.c	Tue Jun 11 22:53:47 2013
+++ jbig2dec\jbig2_mmr.c	Tue Jun 11 22:47:18 2013
@@ -860,11 +860,11 @@
 				black_run = jbig2_decode_get_run(mmr, jbig2_mmr_black_decode, 7);
 				a1 = a0 + white_run;
 				a2 = a1 + black_run;
 				if (a1 > mmr->width) a1 = mmr->width;
 				if (a2 > mmr->width) a2 = mmr->width;
-				if (a2 < a1) return -1;
+				if (a2 < a1 || a1 < 0) return -1;
 				jbig2_set_bits(dst, a1, a2);
 				a0 = a2;
 				/* printf ("H %d %d\n", white_run, black_run); */
 			}
 			else
@@ -873,11 +873,11 @@
 				white_run = jbig2_decode_get_run(mmr, jbig2_mmr_white_decode, 8);
 				a1 = a0 + black_run;
 				a2 = a1 + white_run;
 				if (a1 > mmr->width) a1 = mmr->width;
 				if (a2 > mmr->width) a2 = mmr->width;
-				if (a1 < a0) return -1;
+				if (a1 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, a1);
 				a0 = a2;
 				/* printf ("H %d %d\n", black_run, white_run); */
 			}
 		}
@@ -888,11 +888,11 @@
 			jbig2_decode_mmr_consume(mmr, 4);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			b2 = jbig2_find_changing_element(ref, b1, mmr->width);
 			if (c)
 			{
-				if (b2 < a0) return -1;
+				if (b2 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b2);
 			}
 			a0 = b2;
 		}
 
@@ -901,11 +901,11 @@
 			/* printf ("V(0)\n"); */
 			jbig2_decode_mmr_consume(mmr, 1);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (c)
 			{
-				if (b1 < a0) return -1;
+				if (b1 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1);
 			}
 			a0 = b1;
 			c = !c;
 		}
@@ -916,11 +916,11 @@
 			jbig2_decode_mmr_consume(mmr, 3);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (b1 + 1 > mmr->width) break;
 			if (c)
 			{
-				if (b1 + 1 < a0) return -1;
+				if (b1 + 1 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1 + 1);
 			}
 			a0 = b1 + 1;
 			c = !c;
 		}
@@ -931,11 +931,11 @@
 			jbig2_decode_mmr_consume(mmr, 6);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (b1 + 2 > mmr->width) break;
 			if (c)
 			{
-				if (b1 + 2 < a0) return -1;
+				if (b1 + 2 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1 + 2);
 			}
 			a0 = b1 + 2;
 			c = !c;
 		}
@@ -946,11 +946,11 @@
 			jbig2_decode_mmr_consume(mmr, 7);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (b1 + 3 > mmr->width) break;
 			if (c)
 			{
-				if (b1 + 3 < a0) return -1;
+				if (b1 + 3 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1 + 3);
 			}
 			a0 = b1 + 3;
 			c = !c;
 		}
@@ -961,11 +961,11 @@
 			jbig2_decode_mmr_consume(mmr, 3);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (b1 - 1 < 0) break;
 			if (c)
 			{
-				if (b1 - 1 < a0) return -1;
+				if (b1 - 1 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1 - 1);
 			}
 			a0 = b1 - 1;
 			c = !c;
 		}
@@ -976,11 +976,11 @@
 			jbig2_decode_mmr_consume(mmr, 6);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (b1 - 2 < 0) break;
 			if (c)
 			{
-				if (b1 - 2 < a0) return -1;
+				if (b1 - 2 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1 - 2);
 			}
 			a0 = b1 - 2;
 			c = !c;
 		}
@@ -991,11 +991,11 @@
 			jbig2_decode_mmr_consume(mmr, 7);
 			b1 = jbig2_find_changing_element_of_color(ref, a0, mmr->width, !c);
 			if (b1 - 3 < 0) break;
 			if (c)
 			{
-				if (b1 - 3 < a0) return -1;
+				if (b1 - 3 < a0 || a0 < 0) return -1;
 				jbig2_set_bits(dst, a0, b1 - 3);
 			}
 			a0 = b1 - 3;
 			c = !c;
 		}
diff -rPu5 jbig2dec.orig\jbig2_segment.c jbig2dec\jbig2_segment.c
--- jbig2dec.orig\jbig2_segment.c	Fri May 24 17:23:20 2013
+++ jbig2dec\jbig2_segment.c	Thu May 30 17:26:29 2013
@@ -242,12 +242,10 @@
             } else {
                 return jbig2_error(ctx, JBIG2_SEVERITY_WARNING, segment->number,
                     "unhandled extension segment");
             }
     }
-
-    return 0;
 }
 
 /* general segment parsing dispatch */
 int jbig2_parse_segment (Jbig2Ctx *ctx, Jbig2Segment *segment,
 			 const uint8_t *segment_data)
diff -rPu5 jbig2dec.orig\jbig2_symbol_dict.c jbig2dec\jbig2_symbol_dict.c
--- jbig2dec.orig\jbig2_symbol_dict.c	Tue Jun 11 22:53:47 2013
+++ jbig2dec\jbig2_symbol_dict.c	Wed Jun 12 21:22:52 2013
@@ -440,11 +440,14 @@
               goto cleanup4;
           }
 
 		  code = jbig2_decode_generic_region(ctx, segment, &region_params,
               as, image, GB_stats);
-          if (code < 0) goto cleanup4;
+          if (code < 0) {
+              jbig2_image_release(ctx, image);
+              goto cleanup4;
+          }
 
           SDNEWSYMS->glyphs[NSYMSDECODED] = image;
 	      } else {
           /* 6.5.8.2 refinement/aggregate symbol */
           uint32_t REFAGGNINST;
@@ -775,25 +778,23 @@
     int j = 0;
     int k;
     int exflag = 0;
     int64_t limit = params->SDNUMINSYMS + params->SDNUMNEWSYMS;
     int32_t exrunlength;
-    /* SumatraPDF: prevent infinite loop */
     int zerolength = 0;
 
     while (i < limit) {
       if (params->SDHUFF)
         exrunlength = jbig2_huffman_get(hs, SBHUFFRSIZE, &code);
       else
         code = jbig2_arith_int_decode(IAEX, as, &exrunlength);
       /* SumatraPDF: prevent infinite loop */
       zerolength = exrunlength > 0 ? 0 : zerolength + 1;
-      if (code || (exrunlength > limit - i) || (exrunlength < 0) || (zerolength > 4)) {
+      if (code || (exrunlength > limit - i) || exflag && (exrunlength > params->SDNUMEXSYMS - j) || (exrunlength < 0) || (zerolength > 4)) {
         if (code)
           jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
             "failed to decode exrunlength for exported symbols");
-        /* SumatraPDF: prevent infinite loop */
         else if (exrunlength <= 0)
           jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
             "runlength too small in export symbol table (%d <= 0)\n", exrunlength);
         else
           jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
@@ -949,11 +950,11 @@
         params.SDHUFFDW = jbig2_build_huffman_table(ctx, huffman_params);
         ++table_index;
         break;
       case 2:
       default:
-	return jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
+	jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
 	    "symbol dictionary specified invalid huffman table");
 	break;
     }
     if (params.SDHUFFDW == NULL)
     {
diff -rPu5 jbig2dec.orig\jbig2_text.c jbig2dec\jbig2_text.c
--- jbig2dec.orig\jbig2_text.c	Wed May 29 22:46:18 2013
+++ jbig2dec\jbig2_text.c	Thu May 30 19:32:24 2013
@@ -849,11 +849,11 @@
 
     image = jbig2_image_new(ctx, region_info.width, region_info.height);
     if (image == NULL) {
         code =jbig2_error(ctx, JBIG2_SEVERITY_FATAL, segment->number,
             "couldn't allocate text region image");
-        goto cleanup1;
+        goto cleanup2;
     }
 
     ws = jbig2_word_stream_buf_new(ctx, segment_data + offset, segment->data_length - offset);
     if (ws == NULL)
     {
@@ -949,11 +949,11 @@
     }
     jbig2_free(ctx->allocator, as);
     jbig2_word_stream_buf_free(ctx, ws);
 
 cleanup2:
-    if (!params.SBHUFF && params.SBREFINE) {
+    {
         jbig2_free(ctx->allocator, GR_stats);
     }
     jbig2_image_release(ctx, image);
 
 cleanup1:
